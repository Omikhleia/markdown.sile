# Beyond Markdown: SILE and Djot

{custom-style=raggedleft}
"Djot (/dʒɑt/) is a light markup syntax."[^djot-desc]

[^djot-desc]: From the [Djot website](https://djot.net/).

Djot is a fairly recent markup syntax, proposed by John MacFarlane in 2022.
It derives from (Common) Markdown, solving a lot of its complex syntax pitfalls,
and also extending it on various aspects.
Since mosts concepts are similar, it felt rather natural to include it too in this collection,
so that authors interested in Markdown can give it a try.

The very chapter you are currently reading is written in Djot. As the syntax of the
language is fairly well described in its design document, we are not going to repeat it
here. The chapter is therefore a bit dull, mainly reproducing the same things we
achieved for Markdown earlier. At places, however, it focuses of the specifics of the rendering
engine.

{% THIS TEXT SHOULD NOT APPEAR IN THE OUTPUT, IT IS A DJOT COMMENT %}

{custom-style=FramedPara}
Please note that this is an early implementation and that things may change in
future versions.

## The native djot package

Once you have loaded the `\autodoc:package{djot}`{=sile} package,
the `\autodoc:command{\include[src=<file>]}`{=sile} command supports reading a Djot file.
The native parsing relies on John MacFarlane's *djot* Lua library.


```
\use[module=packages.djot]
\include[src=somefile.dj]
```

Embedding raw Djot content from within a SIL document is also possible:

```
\begin[type=djot]{raw}
Some *Djot* content
\end{raw}
```

{#basic-djot-typesetting}
### Basic typesetting 

As of formatting, _italic_, *bold*, and `code` all work as expected.

Hard line breaks...\
... are supported.

Smart typography is a standard feature. Three dashes (`---`) in an
inline text sequence are converted to an em-dash (---), two dashes (`--`)
to an en-dash useful for ranges (ex., "it's at pages 12--14"), and three dots
(`...`) to an ellipsis (...). Smart quotes and apostrophes are also automatically
handled.

Superscripts and subscripts are available : H~2~O is a liquid, 2^10^ is 1024.
As Djot allows attaching arbitrary attributes to the elements, it's worth noting that
we notably support a `fake` boolean attribute here.[^djot-textsubsuper]

[^djot-textsubsuper]: Controlling whether fake or native superscripts or subscripts are used.
Refer to the `\autodoc:package{textsubsuper}`{=sile} package for details.

Other nice features include:

 - {-deletions-} with `{-deletions-}`
 - {+insertions+} with `{+insertions+}`
 - {=highlight=} with `{=highlight=}`
 - [underlines]{.underline} with `[underlines]{.underline}`
 - [struck out]{.strike} with `[struck out]{.strike}`
 - [Small Caps]{.smallcaps}, as `[Small Caps]{.smallcaps}`

### Standard features

Let's go quickly over these features, just to ensure the package does what it says,
with a good parity with what we earlier described for Markdown.

#### Lists

Unordered lists (a.k.a. itemized or bulleted lists) are obviously supported, or
we would not have been able to use them in the previous sections.

Ordered lists are supported as well.
The starting number is honored, and you have the flexibility to use
digits, roman numbers or letters (in upper or lower case).
Djot also recognizes several delimiter styles.

 b. This list uses lowercase letters and starts at 2. Er... at "b", that is.

     i) Roman number...
     ii) ... followed by a right parenthesis rather than a period.

By the way,

 1. Nesting...

    ... works as intended.

     - Fruits

        - Apple

Task lists following the GitHub-Flavored Markdown (GFM) format are supported too.

 - [ ] Unchecked item
 - [x] Checked item

Definition lists are also decently supported. Note the syntax differs from Pandoc-style Markdown.

 : apples

   Good for making applesauce.

 : citrus

   Like oranges but yellow.

#### Block quotes

Block quotes work.

> This is block quote.
>
> > They can be nested.

#### Footnotes

Footnotes work.[^djot-fnt]

[^djot-fnt]: This is yet another footnote.

#### Languages

Language changes within the text are supported, on either blocks or inline
elements.

{lang=fr}
> Cette citation est en français!

Or inline in text: ["Encore du français!"]{lang=fr}

As can be seen, the current language is taken into account when converting
straight double and single quotation marks to the appropriate typographic variant.

#### Custom styles

The converter also supports the `{custom-style="..."}` attribute.

{#centered-djot custom-style="center"}
This is SILE and Djot at their best{custom-style="strong"}, really!

#### Images

![This man is still Gutenberg.](./gutenberg.jpg){#djot-gutenberg width=3cm}

![xxx](./manicule.svg){height="0.6bs"} Everything seen for Markdown also applies here.

#### Maths

Inline TeX-like math works, as in $`e^{i\pi}=-1`.
Display math also works:
$$`\pi=\sum_{k=0}^\infty\frac{1}{16^k}(\frac{4}{8k+1} − \frac{2}{8k+4} − \frac{1}{8k+5} − \frac{1}{8k+6})`

{#djot-tables}
#### Tables

Djot supports the "pipe table" syntax, with its own way for marking the (optional)
caption.[^djot-numbered-caption]

| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|  12   |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |

^ Demonstration of a pipe table.

[^djot-numbered-caption]: When using the **resilient** classes, the caption will be numbered by
default, and added to the list of tables. Specify `.unnumbered`, and `.notoc` respectively, as
table attributes, if you do not want it.

#### Basic links

Here is a link to [the SILE website](https://sile-typesetter.org/), and
here is an internal link to the "[Basic typesetting](#basic-djot-typesetting)" section.

#### Cross-references

The converter uses the same "tricks" as with Markdown, interpretating links without display
content as cross-references, and specific pseudo-class attributes to indicate which type of
reference is requested.

The section on "[](#djot-tables){ .title }", that is [](#djot-tables){ .section },
is on page [](#djot-tables){ .page }. Figure\ [](#djot-gutenberg) shows Gutenberg; the Sun ("Soleil")
is mentioned in §[](#sun){.section}, verse [](#sun).

#### Code blocks

Code blocks work:

```lua
function fib (n)
  -- Fibonacci numbers
  if n < 2 then return 1 end
  return fib(n - 2) + fib(n - 1)
end
```

Code blocks marked as being in the Graphviz DOT language are rendered as images.

{width="3.5cm" layout=twopi}
```dot
graph {
  node [fillcolor="lightskyblue:darkcyan" style=filled gradientangle=270]
  a -- { b d };
  b -- { c e };
  c -- { f g h i };
  e -- { j k l m n o };
}
```

{render=false width=5cm layout=twopi}
```dot
graph {
  node [fillcolor="lightskyblue:darkcyan" style=filled gradientangle=270]
  a -- { b d };
  b -- { c e };
  c -- { f g h i };
  e -- { j k l m n o };
}
```

Code blocks marked as being in Markdown or Djot are interpreted too (again, unless
the `render` attribute is set to false).
For Markdown, attributes are passed to the converter, allowing to possibly use different compatibility options (see "[Configuration](#configuration)").
This feature allows switching between those languages, would there be something one does not support yet.
At the time of writing, for instance, Djot does not support "line blocks".

This very chapter being written in Djot, let's just switch to Markdown and type some poetry.

```markdown
::: {.poetry}
| I took up the runes,
|  screaming I took them,
| then I fell back from there.
:::
```

#### Raw blocks

```=sile
This \em{entire} sentence is typeset in a \em{raw block}, in SIL language.
```

```=sile-lua
SILE.call("em", {}, { 'This' })
SILE.typesetter:typeset(" is called from Lua.")
```

Likewise, on inline code elements: `\em{idem.}`{=sile}

#### Horizontal dividers

Since Djot allows attaching arbitrary attributes to any element, we do not need here
to rely on an _ad hoc_ workaround, as we previously did with the native Markdown package,
to support several types of "thematic breaks". We just have to "style" the
divider appropriately.

The `.asterism` pseudo-class produces a centered asterism.

  {.asterism}
  ***

The `.dinkus` pseudo-class produces a "dinkus".

  {.dinkus}
  ***

The `.fullrule` pseudo-class produces full rule, taking all the line width.

  {.fullrule}
  ***

The `.bigrule` pseudo-class produces a centered horizontal rule, taking 33% of the line.

  {.bigrule}
  ***

The `.pendant` pseudo-class produces a nice curvy pendant.[^djot-couyards]

  {.pendant}
  ***

The `.none` pseudo-class produces nothing...

  {.none}
  ***

Otherwise, everything else produces a centered horizontal rule, taking 20% of the line.

  ***

All the above classes are exclusive---if more than one are provided, only one is applied.[^djot-hrules]
Additionally, without demonstrating it here, the `.pagebreak` pseudo-class enforces a page break,
just after the thematic break. Note that this differs from our approach in the native Markdown
solution, allowing you to both specify a divider style _and_ introduce a page break after it. It's much
cleaner, and Djot just shines here! Would you want only a page break, you now know the aim of the `.none`
pseudo-class.

[^djot-couyards]: As before, provided the optional *couyards.sile* package module is installed.
[^djot-hrules]: The order in which they are listed above corresponds to their priority.


#### Smarter typography

On inline content, the `.decimal` pseudo-class attribute instructs the converter to consider numbers
in the content as decimal numbers, formatted with suitable decimal mark and digit grouping according
to the usage in the current language.
This allows, say, 1984 to be rendered as "[1984]{ .decimal } years ago" in English,
or "[1984 années]{ .decimal lang=fr }" in French, with appropriate separators.

The `.nobreak` pseudo-class attribute on inline content ensures that line-breaking will not be applied
there. Use it wisely around small pieces of text or you might end up with more serious justification issues! Yet, it might be useful for proper names, etc.

### Templates and variable substitution

[^:pumpernickel:]: Herbert _"Froggie"_ Pumpernickel{.smallcaps .nobreak}
[^:disclaimer:]: _Big disclaimer:_ This interpretation of symbols is not standard.
  We might have to reconsider it as Djot evolves.

Let's now pretend that you are writing an essay about some fictitious :pumpernickel:.

From the previous sections, you know how to typeset that name in Djot syntax:
`Herbert _"Froggie"_ Pumpernickel{.smallcaps .nobreak}`.

So far, so good...
But your problem is that this long name will appear a lot of times.
Repeating it is tedious and error-prone.
Would you appreciate defining it as a replaceable variable going by a much simpler name?

Well, Djot has the notion of a "symbol", a keyword surrounded by colon signs.
Although it was initially provisioned for "emojis", the default interpretation is now left to the rendering engine.

This converter for SILE is focussed on producing print-quality books, where so-called emojis play little part.
We are thefore going to use those symbols in a non-conventional way.
Back to our initial question, what if you could just type `:pumpernickel:` and have it automatically expanded?

Since it's possible to have unused footnote definitions, let's craft one as shown hereafter, with its reference identifier being the same as our targeted variable.

```
[^:pumpernickel:]: Herbert _"Froggie"_ Pumpernickel{.smallcaps .nobreak}
```

When encountering a symbol, this converter looks for such a footnote and expands its content.
It works with inline elements as shown above, but also with full blocks, provided the symbol is the only element in a paragraph of its own.

Of course, these pseudo-footnotes[^djot-pseudo-footnotes] can in turn contain symbols, which will get replaced too.

{custom-style=FramedPara}
:disclaimer:

[^djot-pseudo-footnotes]: You may still use them as regular footnotes.
Whether this is a good idea is another question...

### Predefined symbols

This converter also comes with a few symbols predefined.

- `:_TOC_:` must stand alone in its own paragraph. It inserts a table of contents.
   Attributes on the symbol are passed through, e.g. `:_TOC_:{depth=3}`.
- `:U+xxxx:` (where `xxxx` is a hexadecimal value in upper case) is replaced by the corresponding Unicode character --- `:U+2122:` gives :U+2122:.

The above variable substitution mechanism has precedence over these symbols, allowing you to possibly override them.

{#djot-metadata-symbols}
### Templates and contextual metadata

Some options passed to the converter (see "[](#djot-configuration){.title}") are also available as symbols.

The calling context (a wrapper document in SIL syntax, a resilient "master document", etc.) is responsible for defining the expected symbols.
Here, if this very document was processed from its expected master document, then `:title:` is available.
Let's check how it expands: _:title:._

Again, the variable substitution mechanism also has precedence over these symbols.

### Attributed quotes (epigraphs)

{ rule="0.4pt" }
> The Library is a sphere whose exact centre is any one of its
> hexagons and whose circumference is inaccessible.
^ Jorge Luis [Borges]{.smallcaps}, "The Library of Babel"

Standard Djot only honors captions on tables, and ignores them on other block elements.
When using a **resilient** document class, however, a captioned block quote is rendered as an "epigraph", with the caption content used as its "source" (in a broad sense).
For instance, the above quote was obtained with:

```
{ rule="0.4pt" }
> The Library is a sphere whose exact centre is any one of its
> hexagons and whose circumference is inaccessible.
^ Jorge Luis [Borges]{.smallcaps}, "The Library of Babel"
```

Attributes are passed through to an implicit "div" (so as to honor the language, a link target identifier, etc.) and eventually to the underlying epigraph environment.
Any option supported by the `\autodoc:package{resilient.epigraph}`{=sile} package may thus be used.

Be aware that this behavior is currently an extension.
Other Djot converters will therefore likely skip the caption.

{#djot-configuration}
### Configuration

You can pass additional options to the `\autodoc:command{\include}`{=sile} command or the `\autodoc:environment[check=false]{raw}`{=sile} environment to tune the behavior of the converter.

The `shift_headings` option can take an integer value and causes headers in included or embedded raw content to be offset (that is, shifted by the given amount).
For instance:

```
\include[src=somefile.dj, shift_headings=1]
```

For document classes supporting it, this feature also allows you to access levels above the default scheme, such as "parts".

```
\include[src=somefile.dj, shift_headings=-1]
```

Any other option starting with `meta:` is passed to the converter (with this prefix removed).
See "[](#djot-metadata-symbols){.title}" above.

